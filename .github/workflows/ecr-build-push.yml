name: Build and Push Flask App to ECR (Multi-arch)

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  ECR_REPOSITORY: ${{ secrets.REPO_NAME }} # ¡IMPORTANTE! Reemplaza con el nombre exacto de tu repositorio ECR en AWS
  SERVICE_NAME: web # Nombre del servicio en tu docker-compose.yml que quieres construir
  IMAGE_TAG: latest # Etiqueta principal de la imagen (ej. 'latest'). Puedes usar ${{ github.sha }} para el hash del commit.
  # Define las plataformas objetivo para la construcción de la imagen
  PLATFORMS: linux/amd64,linux/arm64/v8

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker image to ECR (Multi-arch)
        # No necesitamos un paso intermedio de 'build' y luego 'tag/push'.
        # buildx puede construir y empujar directamente.
        run: |
          # Obtiene el URI completo del registro ECR
          ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          
          # Define el nombre completo de la imagen en ECR
          IMAGE_NAME="${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}"

          echo "Building and pushing image for platforms: ${{ env.PLATFORMS }}"
          echo "Image name: ${IMAGE_NAME}"

          # Usa docker compose buildx para construir la imagen para las plataformas especificadas
          # y empujarla directamente a ECR.
          # La bandera --push es crucial para que la imagen se suba a ECR.
          # La bandera --load se usaría si quisieras cargar la imagen en el demonio Docker del runner local
          # en lugar de empujarla directamente (no es lo que queremos aquí).
          docker buildx build \
            --platform ${{ env.PLATFORMS }} \
            --tag "${IMAGE_NAME}:${{ env.IMAGE_TAG }}" \
            --tag "${IMAGE_NAME}:${{ github.sha }}" \
            --file ./Dockerfile \
            --push \
            .

name: Build and Push Flask App to ECR

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  ECR_REPOSITORY: ${{ secrets.REPO_NAME }} # ¡IMPORTANTE! Reemplaza con el nombre exacto de tu repositorio ECR en AWS
  SERVICE_NAME: web # Nombre del servicio en tu docker-compose.yml que quieres construir
  IMAGE_TAG: latest # Etiqueta principal de la imagen (ej. 'latest'). Puedes usar ${{ github.sha }} para el hash del commit.

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx (and Docker Compose)
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image using Docker Compose # Modificamos ligeramente este paso
        run: |
          # Construye la imagen para el servicio especificado.
          # Docker Compose la nombrará por defecto como <nombre_directorio_proyecto>_<nombre_servicio>
          docker compose build ${{ env.SERVICE_NAME }}

          # Obtiene el nombre de la imagen que Docker Compose acaba de construir.
          # El nombre por defecto es <nombre_del_directorio_del_repo>_<nombre_del_servicio_en_compose>
          # 'basename ${{ github.repository }}' obtiene solo el nombre del repo (ej. 'py-compose-ecr')
          REPO_NAME=$(basename ${{ github.repository }})
          # El nombre completo de la imagen local debería ser:
          LOCAL_IMAGE_NAME="${REPO_NAME}_${{ env.SERVICE_NAME }}"

          echo "LOCAL_IMAGE_NAME=${LOCAL_IMAGE_NAME}" >> $GITHUB_ENV # Pasa la variable al entorno para el siguiente paso

      - name: Tag and Push Docker image to ECR
        run: |
          # Ahora usamos LOCAL_IMAGE_NAME que obtuvimos del paso anterior
          # El 'latest' o cualquier tag que docker-compose le puso por defecto
          # también debe incluirse en la imagen de origen.
          SOURCE_IMAGE_WITH_TAG="${{ env.LOCAL_IMAGE_NAME }}:latest" # Asumimos que docker-compose build etiqueta con 'latest' por defecto

          # Define el URI completo de la imagen ECR para la etiqueta principal
          ECR_FULL_IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"

          # Define el URI completo de la imagen ECR para la etiqueta con el SHA del commit
          ECR_FULL_IMAGE_URI_SHA="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"

          # Etiqueta la imagen local con los URIs completos de ECR
          docker tag ${SOURCE_IMAGE_WITH_TAG} ${ECR_FULL_IMAGE_URI}
          docker tag ${SOURCE_IMAGE_WITH_TAG} ${ECR_FULL_IMAGE_URI_SHA}

          # Empuja las imágenes a ECR
          docker push ${ECR_FULL_IMAGE_URI}
          docker push ${ECR_FULL_IMAGE_URI_SHA}

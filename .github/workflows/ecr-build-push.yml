name: Build and Push Flask App to ECR (Multi‑arch)

on:
  push:
    branches: [main]       # Ejecuta en cada push a main
  workflow_dispatch:       # Permite lanzarlo manualmente

env:
  # Nombre exacto de tu repositorio ECR (defínelo en GitHub Secrets)
  ECR_REPOSITORY: ${{ secrets.REPO_NAME }}

  # Servicio que quieres construir dentro de docker‑compose.yml
  SERVICE_NAME: web

  # Etiqueta principal de la imagen (cámbiala a ${{ github.sha }} si prefieres)
  IMAGE_TAG: latest

  # Plataformas objetivo (añade las que necesites)
  PLATFORMS: linux/amd64,linux/arm64/v8

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      # 1) Descarga el código
      - name: Checkout source
        uses: actions/checkout@v4

      # 2) Habilita emulación cross‑arch con QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      # 3) Prepara Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4) Configura credenciales AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      # 5) Login en Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 6) Build & push con docker compose
      - name: Build and push Docker image
        id: build-image
        env:
          # URI completa del repo ECR: <aws_account_id>.dkr.ecr.<region>.amazonaws.com/<repo>
          IMAGE_URI: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        run: |
         
          # Construye la imagen para el servicio especificado.
          # La salida de este comando a veces puede incluir el ID de la imagen.
          docker compose build ${{ env.SERVICE_NAME }}

          # ¡ESTA ES LA PARTE CLAVE!
          # Obtenemos el ID de la imagen recién construida usando docker images.
          # Filtramos por las imágenes sin nombre (<none>) que a menudo son el resultado de 'docker compose build'
          # o por el nombre esperado si lo tuviera.
          # Ordenamos por fecha de creación descendente y tomamos el ID más reciente.
          # 'grep $(basename ${{ github.repository }})' ayuda a filtrar por el nombre del repo
          # si docker compose le da un nombre como 'py-compose-ecr_web'
          IMAGE_ID=$(docker images --format "{{.ID}}\t{{.Repository}}\t{{.Tag}}" | grep "$(basename ${{ github.repository }})_${{ env.SERVICE_NAME}}" | head -n 1 | awk '{print $1}')

          # Si el comando anterior no encuentra la imagen por nombre, probamos con la imagen más reciente sin tag
          if [ -z "${IMAGE_ID}" ]; then
            IMAGE_ID=$(docker images --filter "dangling=false" --format "{{.ID}}\t{{.CreatedAt}}" | sort -k2 -r | head -n 1 | awk '{print $1}')
            echo "Advertencia: No se encontró la imagen por nombre. Usando la imagen construida más recientemente con ID: ${IMAGE_ID}"
          fi

          if [ -z "${IMAGE_ID}" ]; then
            echo "Error: No se pudo obtener el ID de la imagen construida."
            exit 1
          fi

          echo "::set-output name=image_id::${IMAGE_ID}" # Pasa el ID de la imagen como una salida del paso

      - name: Tag and Push Docker image to ECR
        run: |
          # Obtiene el ID de la imagen del paso anterior
          IMAGE_ID="${{ steps.build-image.outputs.image_id }}"

          if [ -z "${IMAGE_ID}" ]; then
            echo "Error: El ID de la imagen está vacío. No se puede etiquetar ni empujar."
            exit 1
          fi

          # Define el URI completo de la imagen ECR para la etiqueta principal
          ECR_FULL_IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"

          # Define el URI completo de la imagen ECR para la etiqueta con el SHA del commit
          ECR_FULL_IMAGE_URI_SHA="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"

          # Etiqueta la imagen local usando su ID (la forma más segura)
          docker tag ${IMAGE_ID} ${ECR_FULL_IMAGE_URI}
          docker tag ${IMAGE_ID} ${ECR_FULL_IMAGE_URI_SHA}

          # Empuja las imágenes a ECR
          docker push ${ECR_FULL_IMAGE_URI}
          docker push ${ECR_FULL_IMAGE_URI_SHA}
       

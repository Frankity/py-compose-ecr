name: Build and Push Flask App to ECR (Multi‑arch)

on:
  push:
    branches: [main]       # Ejecuta en cada push a main
  workflow_dispatch:       # Permite lanzarlo manualmente

env:
  # Nombre exacto de tu repositorio ECR (defínelo en GitHub Secrets)
  ECR_REPOSITORY: ${{ secrets.REPO_NAME }}

  # Servicio que quieres construir dentro de docker‑compose.yml
  SERVICE_NAME: web

  # Etiqueta principal de la imagen (cámbiala a ${{ github.sha }} si prefieres)
  IMAGE_TAG: latest

  # Plataformas objetivo (añade las que necesites)
  PLATFORMS: linux/amd64,linux/arm64/v8

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      # 1) Descarga el código
      - name: Checkout source
        uses: actions/checkout@v4

      # 2) Habilita emulación cross‑arch con QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      # 3) Prepara Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4) Configura credenciales AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      # 5) Login en Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 6) Build & push con docker compose
      - name: Build and push Docker image
        env:
          # URI completa del repo ECR: <aws_account_id>.dkr.ecr.<region>.amazonaws.com/<repo>
          IMAGE_URI: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        run: |
          # Construye solo el servicio indicado y publica la imagen multi‑arch
          ECR_FULL_IMAGE_URI_SHA="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"

          docker compose build \
            --push \
            ${{ env.SERVICE_NAME }}

          # Etiqueta la imagen local usando su ID (la forma más segura)

       
